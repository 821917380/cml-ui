<template>
<view class="tip" c-if="{{show}}" style="{{tipStyle}}">
  <image class="tip-angle-weex" src="{{angleImg}}" style="{{angleStyle}}" c-if="{{isWeex}}" />
  <view class="tip-angle {{'tip-angle-' + direction}}" style="{{angleStyle}}" c-else></view>
  <view class="tip-wrap">
    <view class="tip-close" c-bind:tap="closeTap">
        <image src="{{closeUrl}}" style="width:24cpx;height:24cpx;"/>
    </view>
    <view class="tip-content">
      <slot></slot>
    </view>
  </view>
</view>
</template>
<script>
import _util from './util.interface';
class CTip   {
  props = {
    show: {
      type: Boolean,
      default: false
    },
    direction: {
      type: String,
      default: "top" //bottom, left, right
    },
    closeUrl: {
      type: String,
      default: require("./images/close.png")
    },
    offsetLeft: {
      type: Number,
      default: 0
    },
    offsetTop: {
      type: Number,
      default: 0
    },
    offsetRight: {
      type: Number,
      default: 0
    },
    offsetBottom: {
      type: Number,
      default: 0
    }
  }

  data = {
    iconMap: {
      left: require("./images/left.png"),
      right: require("./images/right.png"),
      top: require("./images/top.png"),
      bottom: require("./images/bottom.png")
    },
    isWeex: _util.isWeex()
  }

  computed = {
    angleImg() {
      return this.iconMap[this.direction]
    },
    tipStyle() {
      let style;
      switch (this.direction) {
        case 'top':
          if ( this.offsetLeft || this.offsetRight ) {
            style = "padding-bottom: 16cpx;"
          } else {
            style = "flex-direction: column-reverse;";
          }
          break;
        case 'right':
          if (this.offsetTop || this.offsetBottom ) {
            style = "padding-left: 16cpx;"
          } else {
            style = "flex-direction: row;";
          }
          break;
        case 'bottom':
          if (this.offsetLeft || this.offsetRight) {
            style = "padding-top: 16cpx;"
          } else {
            style = 'flex-direction: column;';
          }
          break;
        case 'left': 
         if (this.offsetTop || this.offsetBottom) {
            style = "padding-right: 16cpx;"
          } else {
            style = 'flex-direction: row-reverse;';
          }
          break;
      }
      return style;
    },
    angleStyle() {
      let style;
      switch (this.direction) {
        case 'top':
          if (this.offsetLeft || this.offsetRight) {
            style =  `position: absolute; bottom: 0;width: 32cpx; height: 16cpx;`;
            if( this.offsetLeft) {
              style = style + `left:${this.offsetLeft}cpx;`
            }
            if (this.offsetRight) {
            style = `width: 32cpx; height: 16cpx;`;
            }
          } else {
            style = `width: 32cpx; height: 16cpx;`;
          }
          break;
        case 'right':
          if (this.offsetTop || this.offsetBottom) {
            style =  `position: absolute; left: 0;width: 16cpx; height: 32cpx;`;
            if( this.offsetTop) {
              style = style + `top:${this.offsetTop}cpx;`
            }
            if (this.offsetBottom) {
              style = style + `bottom:${this.offsetBottom}cpx;`
            }
          } else {
            style = `width: 16cpx; height: 32cpx;`;
          }
          break;
        case 'bottom':
          if (this.offsetLeft || this.offsetRight) {
            style =  `position: absolute; top: 0;width: 32cpx; height: 16cpx;`;
            if( this.offsetLeft) {
              style = style + `left:${this.offsetLeft}cpx;`
            }
            if (this.offsetRight) {
              style = style + `right:${this.offsetRight}cpx;`
            }
          } else {
            style = `width: 32cpx; height: 16cpx;`;
          }
          break;
        case 'left':
          if (this.offsetTop || this.offsetBottom) {
            style =  `position: absolute; right: 0;width: 16cpx; height: 32cpx;`;
            if( this.offsetTop) {
              style = style + `top:${this.offsetTop}cpx;`
            }
            if (this.offsetBottom) {
              style = style + `bottom:${this.offsetBottom}cpx;`
            }
          } else {
            style = `width: 16cpx; height: 32cpx;`;
          }
          break;
      }
      return style;
    }
  }

  watch  = {
  }

  methods = {
    closeTap() {
      this.$cmlEmit("close");
    }
  }
}

export default new CTip();
</script>
<style scoped lang="less">
@tip-color: rgba(74, 76, 91, 0.8);
.tip {
  position: absolute;
  display: flex;
}
.tip-wrap {
  display: flex;
  flex-direction: row;
  align-items: center;
  position: relative;
  padding: 20cpx 80cpx 20cpx 25cpx;
  border-radius: 4cpx;
  background: rgba(74, 76, 91, 0.8);
}
.tip-angle-weex {
  align-self: center;
}
.tip-angle {
  align-self: center;
  border: 16cpx solid @tip-color;
  &-top {
    border-right-color: transparent;
    border-left-color: transparent;
    border-bottom: none;
  }
  &-bottom {
    border-right-color: transparent;
    border-left-color: transparent;
    border-top: none;
  }
  &-left {
    border-top-color: transparent;
    border-bottom-color: transparent;
    border-right: none;
  }
  &-right {
    border-top-color: transparent;
    border-bottom-color: transparent;
    border-left: none;
  }
}
.tip-close {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  width: 76cpx;
  padding: 20cpx 0;
  display: flex;
  justify-content: center;
  align-items: center;
}
.tip-content {
  font-size: 24cpx;
}
</style>
<script cml-type="json">
{
  "base": {
    "component": true
  }
}
</script>
